generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum LocationType {
  Point
}

type Location {
  coordinates Float[]
  name        String
  type        LocationType
}

model Comment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  event_id      String?  @db.ObjectId
  post_id       String?  @db.ObjectId
  user_id       String   @db.ObjectId
}

model Event {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  description   String
  event_date    DateTime       @db.Date
  hobby_id      String         @db.ObjectId
  joiners       String[]
  location      Location
  maxJoiners    Int
  seats         String
  title         String
  user_id       String         @db.ObjectId
  vehicle       Boolean

  @@index([location], map: "location_2dsphere")
}

model Follower {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  follower_id   String    @db.ObjectId
  user_id       String    @db.ObjectId
}

model Hobby {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  hobby_name    String    @unique(map: "hobby_name_1")
  user_id       String   @db.ObjectId
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Post {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  description   String
  hobby_id      String        @db.ObjectId
  image         String
  like          String[]
  location      Location
  user_id       String        @db.ObjectId
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  bio           String?
  birth_date    DateTime?      @db.Date
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  email         String         @unique(map: "email_1")
  hobbies       Hobby[]
  location      Location?
  name          String
  password      String
  /// Multiple data types found: Float: 50%, Int: 50% out of 6 sampled entries
  phone_number  String?
  profile_img   String?
  user_name     String         @unique(map: "user_name_1")
}
