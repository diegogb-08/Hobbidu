generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider          = "prisma-zod-generator"
  isGenerateSelect  = "true"
  isGenerateInclude = "true"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum LocationType {
  Point
}

type Location {
  coordinates Float[]
  name        String
  type        LocationType
}

enum Role {
  Standard
  Admin
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event_id  String?  @db.ObjectId
  post_id   String?  @db.ObjectId
  user_id   String   @db.ObjectId
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  event_date  DateTime @db.Date
  hobby       Hobby    @relation(fields: [hobbyID], references: [id])
  hobbyID     String   @db.ObjectId
  users       User[]   @relation(fields: [userIDs], references: [id])
  hostID      String   @db.ObjectId
  userIDs     String[] @db.ObjectId
  location    Location
  maxUsers    Int
  title       String

  @@index([location], map: "location_2dsphere")
}

model Follower {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower_id String   @db.ObjectId
  user_id     String   @db.ObjectId
}

model Hobby {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique(map: "name_1")
  user      User[]   @relation(fields: [userIDs], references: [id])
  userIDs   String[] @db.ObjectId
  events    Event[]
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  hobby_id    String   @db.ObjectId
  image       String
  like        String[]
  location    Location
  user_id     String   @db.ObjectId
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  bio          String?
  birth_date   DateTime? @db.Date
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  email        String    @unique()
  hobbies      Hobby[]   @relation(fields: [hobbyIDs], references: [id])
  hobbyIDs     String[]  @db.ObjectId
  events       Event[]   @relation(fields: [eventIDs], references: [id])
  eventIDs     String[]  @db.ObjectId
  location     Location?
  name         String?
  password     String
  phone_number String?
  profile_img String?
  user_name    String    @unique()
  role         Role      @default(Standard)

  @@index([location], map: "location_2dsphere")
}

model File {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  mimeType String
  size     Int
  data     Bytes  @db.BinData
}
